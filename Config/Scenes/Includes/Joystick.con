# left stick: walk forward/sideward
# right stick: walk turn, tilt head
# shoulder buttons: pan head
# stick buttons: walk mode
# buttons 1/3: kick left/right
# button 2: sit down
# button 4: toggle between stand and high stand

js 4 0.8 0.01 0.32 # head tilt axis
js 7 1.7 0.01 # head pan axis

js 2 1 0.01 # walk x axis
js 1 1 0.03 # walk y axis
js 3 1 0.01 # walk rotation axis

# map shoulder buttons to the head pan axis
jm 7 5 6

# head motion
jc motion 1 set representation:HeadMotionRequest mode = panTiltMode; cameraControlMode = autoCamera; pan = $7; tilt = $4; speed = 0.5; target = { x = 1; y = 0; z = 0; }; stopAndGoMode = false;

# body motion
jc press 11 call Includes/JoystickWalk
jc press 12 call Includes/JoystickWalk
jc press 4 call Includes/JoystickStand
jc press 2 call Includes/JoystickSit

# walk kick left
jc press 1 set representation:MotionRequest motion = walkToBallAndKick; standHigh = true; energySavingWalk = false; walkSpeed = { rotation = 1; translation = { x = 1; y = 1; }; }; walkTarget = { rotation = 0deg; translation = { x = 0; y = 0; }; }; keepTargetRotation = false; obstacleAvoidance = { avoidance = { x = 0; y = 0; }; path = []; }; targetOfInterest = []; sideWalkingRequest = allowed; shouldInterceptBall = false; shouldWalkOutOfBallLine = false; targetDirection = 0deg; directionPrecision = { min = -5deg; max = 5deg; }; kickType = walkForwardsLeftAlternative; kickLength = 1; alignPrecisely = notPrecise; preStepType = allowed; turnKickAllowed = true; shiftTurnKickPose = false; diveRequest = prepare; specialRequest = demoBannerWave; odometryData = { rotation = 0; translation = { x = 0; y = 0; }; }; ballEstimate = { position = { x = 200; y = 45; }; velocity = { x = 0; y = 0; }; radius = 50; covariance = { cols = [ { elems = [ 1, 0 ]; }, { elems = [ 0, 1 ]; } ]; }; }; ballEstimateTimestamp = 0; ballTimeWhenLastSeen = 0;

# walk kick right
jc press 3 set representation:MotionRequest motion = walkToBallAndKick; standHigh = true; energySavingWalk = false; walkSpeed = { rotation = 1; translation = { x = 1; y = 1; }; }; walkTarget = { rotation = 0deg; translation = { x = 0; y = 0; }; }; keepTargetRotation = false; obstacleAvoidance = { avoidance = { x = 0; y = 0; }; path = []; }; targetOfInterest = []; sideWalkingRequest = allowed; shouldInterceptBall = false; shouldWalkOutOfBallLine = false; targetDirection = 0deg; directionPrecision = { min = -5deg; max = 5deg; }; kickType = walkForwardsRightAlternative; kickLength = 1; alignPrecisely = notPrecise; preStepType = allowed; turnKickAllowed = true; shiftTurnKickPose = false; diveRequest = prepare; specialRequest = demoBannerWave; odometryData = { rotation = 0; translation = { x = 0; y = 0; }; }; ballEstimate = { position = { x = 200; y = -45; }; velocity = { x = 0; y = 0; }; radius = 50; covariance = { cols = [ { elems = [ 1, 0 ]; }, { elems = [ 0, 1 ]; } ]; }; }; ballEstimateTimestamp = 0; ballTimeWhenLastSeen = 0;

for Motion set representation:OdometryDataPreview rotation = 0deg; translation = { x = 0; y = 0; }; odometryChange = { rotation = 0deg; translation = { x = 0; y = 0; }; };
set module:WalkToBallAndKickEngine:ignoreBallTimestamp true

RobotPoseCompact
{
  rotation: Angle(bits=8)
  translation: Vector<Float(min=-5120, max=5110, bits=10)>(n=2)
  quality: Enum(type=RobotPose::LocalizationQuality)
  covariance: Matrix<Integer(min=-32768, max=32767)>(m=2, n=2, symmetric) // Is actually something like Matrix<float16_t>
  timestampLastJump: Timestamp(bits=1, shift=10, reference=relativePast, noclip)
}

RobotStatus
{
  isUpright: Boolean
  timeWhenLastUpright: Timestamp(bits=8, shift=6, reference=relativePast)
}

BallState
{
  position: Vector<Float(min=-12800, max=12800, bits=11)>(n=2)
  velocity: Vector<Float(min=-8000, max=8000, bits=11)>(n=2)
  // covariance: Matrix<Float>(m=2, n=2, symmetric) // Unused
}

BallModel
{
  // lastPerception: Vector<Float(min=-32768, max=32767, bits=16)>(n=2) // Unused
  estimate: BallState
  timeWhenDisappeared: Timestamp(bits=9, shift=6, reference=relativePast, noclip)
  timeWhenLastSeen: Timestamp(bits=11, shift=4, reference=relativePast, noclip)
  // seenPercentage: Integer(min=0, max=100) // Unused
}

RecentWhistle
{
  confidenceOfLastWhistleDetection: Float(min=0, max=2.55, bits=8)
  lastTimeWhistleDetected: Timestamp(bits=8, shift=4, reference=relativePast, noclip)
}

WhistleCompact
{
  listening: Boolean
  recentWhistle: RecentWhistle[:1]
}

BehaviorStatus
{
  passTarget: Integer(min=-1, max=14)
  walkingTo: Vector<Float(min=-12800, max=12800, bits=11)>(n=2)
  speed: Float(min=0.0, max=310.0, bits=5)
  shootingTo: Vector<Float(min=-12800, max=12800, bits=11)>(n=2)[:1]
}

StrategyStatus
{
  proposedTactic: Enum(type=Tactic::Type)
  acceptedTactic: Enum(type=Tactic::Type)
  proposedMirror: Boolean
  acceptedMirror: Boolean
  proposedSetPlay: Enum(type=SetPlay::Type)
  acceptedSetPlay: Enum(type=SetPlay::Type)
  position: Enum(type=Tactic::Position::Type)
  role: Enum(type=Role::Type)
}

IndirectKick
{
  lastKickTimestamp: Timestamp(bits=24, shift=8, reference=relativePast, noclip)
}

RefereeSignal
{
  signal: Enum(type=RefereeGesture::Gesture)
  timeWhenDetected: Timestamp(bits=11, shift=4, reference=relativePast, noclip)
}

FrameInfo
{
  time: Timestamp(bits=0, reference=relativePast)
}

TeamMessage
{
  theRobotPose: RobotPoseCompact
  theRobotStatus: RobotStatus
  theFrameInfo: FrameInfo
  theBallModel: BallModel
  theWhistle: WhistleCompact
  theBehaviorStatus: BehaviorStatus
  theStrategyStatus: StrategyStatus
  theIndirectKick: IndirectKick
  theRefereeSignal: RefereeSignal
}

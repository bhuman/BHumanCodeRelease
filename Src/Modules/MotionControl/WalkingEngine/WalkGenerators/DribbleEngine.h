/**
 * @file DribbleEngine.h
 *
 * This file declares a module that provides a dribble generator.
 *
 * @author Philip Reichenberg
 * @author Arne Hasselbring
 */

#pragma once

#include "Representations/Configuration/BallSpecification.h"
#include "Representations/Configuration/KickInfo.h"
#include "Representations/Infrastructure/FrameInfo.h"
#include "Representations/MotionControl/DribbleGenerator.h"
#include "Representations/MotionControl/MotionInfo.h"
#include "Representations/MotionControl/OdometryData.h"
#include "Representations/MotionControl/WalkGenerator.h"
#include "Representations/MotionControl/WalkingEngineOutput.h"
#include "Representations/MotionControl/WalkKickGenerator.h"
#include "Representations/MotionControl/WalkStepData.h"
#include "Representations/MotionControl/WalkToBallGenerator.h"
#include "Representations/Sensing/RobotModel.h"
#include "Representations/Sensing/TorsoMatrix.h"
#include "Framework/Module.h"

MODULE(DribbleEngine,
{,
  REQUIRES(BallSpecification),
  REQUIRES(FrameInfo),
  REQUIRES(KickInfo),
  USES(MotionInfo),
  REQUIRES(OdometryDataPreview),
  REQUIRES(RobotModel),
  REQUIRES(TorsoMatrix),
  REQUIRES(WalkGenerator),
  REQUIRES(WalkingEngineOutput),
  REQUIRES(WalkKickGenerator),
  REQUIRES(WalkStepData),
  REQUIRES(WalkToBallGenerator),
  PROVIDES(DribbleGenerator),
  DEFINES_PARAMETERS(
  {,
    (Angle)(3_deg) redecideSignThreshold, /**< The dribble foot is only re-decided if the decision angle is larger than this. */
    (float)(100.f) minBallPositionFuture, /**< Ball must land this far away from us if it is rolling towards us. */
    (float)(500.f) minBallPositionFrontSide, /**< Ball must be this far away relative to the closest point it will have to us. */
    (float)(300.f) minBallVelocityCloseRange, /**< Clip ball velocity to this value when close to the ball. */
    (Rangef)(250.f, 2000.f) ballVelocityInterpolationRange, /**< Based on the current ball distance interpolate the velocity. */
    (float)(800.f) maxBallVelocity, /**< Max ball velocity to still allow a kick. */
  }),
});

class DribbleEngine : public DribbleEngineBase
{
  void update(DribbleGenerator& dribbleGenerator) override;

  /**
   * Calculates the pose where the robot should walk to be able to dribble the ball with one step.
   * @param ballInSCS The ball position relative to the new support foot frame.
   * @param directionInSCS The direction relative to the new support foot frame to which the ball should be dribbled.
   * @param sign The foot sign with which to dribble.
   * @param turnKickAllowed Is the turn kick interpolation allowed?
   * @return The pose from which the ball can be dribbled with one step.
   */
  Pose2f calcBasePose(const Vector2f& ballInSCS, Angle directionInSCS, float& sign, const bool turnKickAllowed) const;

  float lastSign = 1.f; /**< The foot sign of the last phase generated by this engine. */

  /**
   * Calculate a temp kick pose in case the ball is rolling towards us.
   * We can not trust the perceived ball velocity and direction. Therefore clip the ball position, to avoid turning away from the ball.
   * @param motionRequest Motion request to access original ball velocity
   * @param ballSCS ball position used to determine the kick pose
   * @param ballInSCSNow current used relative ball position
   * @param scsCognition transformation pose to get a relative field position into a zero-step relative position (only rotation is used)
   */
  void calcInterceptionPosition(const MotionRequest& motionRequest, Vector2f& ballSCS,
                                const Vector2f& ballInSCSNow, const Pose2f& scsCognition);
};

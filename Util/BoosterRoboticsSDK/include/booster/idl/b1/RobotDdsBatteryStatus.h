// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file RobotDdsBatteryStatus.h
 * This header file contains the declaration of the described types in the IDL
 * file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_BOOSTER_INTERFACE_MSG_ROBOTDDSBATTERYSTATUS_H_
#define _FAST_DDS_GENERATED_BOOSTER_INTERFACE_MSG_ROBOTDDSBATTERYSTATUS_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <map>
#include <string>
#include <vector>

// ------------------------------ Pub Sub Type Start
// ----------------------------
#include <fastdds/rtps/common/InstanceHandle.h>
#include <fastdds/rtps/common/SerializedPayload.h>
#include <fastrtps/utils/md5.h>

#include <fastdds/dds/core/policy/QosPolicies.hpp>
#include <fastdds/dds/topic/TopicDataType.hpp>

#if !defined(GEN_API_VER) || (GEN_API_VER != 2)
#error \
    Generated RobotDdsBatteryStatus is not compatible with current installed Fast DDS. Please, regenerate it with fastddsgen.
#endif  // GEN_API_VER

// ------------------------------ Pub Sub Type End ----------------------------

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec(dllexport)
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ROBOTDDSBATTERYSTATUS_SOURCE)
#define ROBOTDDSBATTERYSTATUS_DllAPI __declspec(dllexport)
#else
#define ROBOTDDSBATTERYSTATUS_DllAPI __declspec(dllimport)
#endif  // ROBOTDDSBATTERYSTATUS_SOURCE
#else
#define ROBOTDDSBATTERYSTATUS_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ROBOTDDSBATTERYSTATUS_DllAPI
#endif  // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
}  // namespace fastcdr
}  // namespace eprosima

namespace booster_interface {

namespace msg {

/*!
 * @brief This class represents the structure RobotDdsBatteryStatus defined by
 * the user in the IDL file.
 * @ingroup RobotDdsBatteryStatus
 */
class RobotDdsBatteryStatus : public eprosima::fastdds::dds::TopicDataType {
 public:
  /*!
   * @brief Copy constructor.
   * @param x Reference to the object
   * booster_interface::msg::RobotDdsBatteryStatus that will be copied.
   */
  eProsima_user_DllExport RobotDdsBatteryStatus(const RobotDdsBatteryStatus& x);

  /*!
   * @brief Move constructor.
   * @param x Reference to the object
   * booster_interface::msg::RobotDdsBatteryStatus that will be copied.
   */
  eProsima_user_DllExport RobotDdsBatteryStatus(
      RobotDdsBatteryStatus&& x) noexcept;

  /*!
   * @brief Copy assignment.
   * @param x Reference to the object
   * booster_interface::msg::RobotDdsBatteryStatus that will be copied.
   */
  eProsima_user_DllExport RobotDdsBatteryStatus& operator=(
      const RobotDdsBatteryStatus& x);

  /*!
   * @brief Move assignment.
   * @param x Reference to the object
   * booster_interface::msg::RobotDdsBatteryStatus that will be copied.
   */
  eProsima_user_DllExport RobotDdsBatteryStatus& operator=(
      RobotDdsBatteryStatus&& x) noexcept;

  /*!
   * @brief Comparison operator.
   * @param x booster_interface::msg::RobotDdsBatteryStatus object to compare.
   */
  eProsima_user_DllExport bool operator==(const RobotDdsBatteryStatus& x) const;

  /*!
   * @brief Comparison operator.
   * @param x booster_interface::msg::RobotDdsBatteryStatus object to compare.
   */
  eProsima_user_DllExport bool operator!=(const RobotDdsBatteryStatus& x) const;

  /*!
   * @brief This function copies the value in member name
   * @param _name New value to be copied in member name
   */
  eProsima_user_DllExport void name(const std::string& _name);

  /*!
   * @brief This function moves the value in member name
   * @param _name New value to be moved in member name
   */
  eProsima_user_DllExport void name(std::string&& _name);

  /*!
   * @brief This function returns a constant reference to member name
   * @return Constant reference to member name
   */
  eProsima_user_DllExport const std::string& name() const;

  /*!
   * @brief This function returns a reference to member name
   * @return Reference to member name
   */
  eProsima_user_DllExport std::string& name();

  /*!
   * @brief This function sets a value in member temperature
   * @param _temperature New value for member temperature
   */
  eProsima_user_DllExport void temperature(float _temperature);

  /*!
   * @brief This function returns the value of member temperature
   * @return Value of member temperature
   */
  eProsima_user_DllExport float temperature() const;

  /*!
   * @brief This function returns a reference to member temperature
   * @return Reference to member temperature
   */
  eProsima_user_DllExport float& temperature();

  /*!
   * @brief This function sets a value in member soc
   * @param _soc New value for member soc
   */
  eProsima_user_DllExport void soc(float _soc);

  /*!
   * @brief This function returns the value of member soc
   * @return Value of member soc
   */
  eProsima_user_DllExport float soc() const;

  /*!
   * @brief This function returns a reference to member soc
   * @return Reference to member soc
   */
  eProsima_user_DllExport float& soc();

  /*!
   * @brief This function sets a value in member voltage
   * @param _voltage New value for member voltage
   */
  eProsima_user_DllExport void voltage(float _voltage);

  /*!
   * @brief This function returns the value of member voltage
   * @return Value of member voltage
   */
  eProsima_user_DllExport float voltage() const;

  /*!
   * @brief This function returns a reference to member voltage
   * @return Reference to member voltage
   */
  eProsima_user_DllExport float& voltage();

  /*!
   * @brief This function sets a value in member status_code
   * @param _status_code New value for member status_code
   */
  eProsima_user_DllExport void status_code(int32_t _status_code);

  /*!
   * @brief This function returns the value of member status_code
   * @return Value of member status_code
   */
  eProsima_user_DllExport int32_t status_code() const;

  /*!
   * @brief This function returns a reference to member status_code
   * @return Reference to member status_code
   */
  eProsima_user_DllExport int32_t& status_code();

  /*!
   * @brief This function sets a value in member status_level
   * @param _status_level New value for member status_level
   */
  eProsima_user_DllExport void status_level(int32_t _status_level);

  /*!
   * @brief This function returns the value of member status_level
   * @return Value of member status_level
   */
  eProsima_user_DllExport int32_t status_level() const;

  /*!
   * @brief This function returns a reference to member status_level
   * @return Reference to member status_level
   */
  eProsima_user_DllExport int32_t& status_level();

 private:
  std::string m_name;
  float m_temperature{0.0};
  float m_soc{0.0};
  float m_voltage{0.0};
  int32_t m_status_code{0};
  int32_t m_status_level{0};

 public:
  typedef RobotDdsBatteryStatus type;

  eProsima_user_DllExport RobotDdsBatteryStatus();

  eProsima_user_DllExport ~RobotDdsBatteryStatus() override;

  eProsima_user_DllExport bool serialize(
      void* data,
      eprosima::fastrtps::rtps::SerializedPayload_t* payload) override {
    return serialize(data, payload,
                     eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
  }

  eProsima_user_DllExport bool serialize(
      void* data, eprosima::fastrtps::rtps::SerializedPayload_t* payload,
      eprosima::fastdds::dds::DataRepresentationId_t data_representation)
      override;

  eProsima_user_DllExport bool deserialize(
      eprosima::fastrtps::rtps::SerializedPayload_t* payload,
      void* data) override;

  eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
      void* data) override {
    return getSerializedSizeProvider(
        data, eprosima::fastdds::dds::DEFAULT_DATA_REPRESENTATION);
  }

  eProsima_user_DllExport std::function<uint32_t()> getSerializedSizeProvider(
      void* data,
      eprosima::fastdds::dds::DataRepresentationId_t data_representation)
      override;

  eProsima_user_DllExport bool getKey(
      void* data, eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
      bool force_md5 = false) override;

  eProsima_user_DllExport void* createData() override;

  eProsima_user_DllExport void deleteData(void* data) override;

#ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
  eProsima_user_DllExport inline bool is_bounded() const override {
    return false;
  }

#endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

#ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
  eProsima_user_DllExport inline bool is_plain() const override {
    return false;
  }

  eProsima_user_DllExport inline bool is_plain(
      eprosima::fastdds::dds::DataRepresentationId_t data_representation)
      const override {
    static_cast<void>(data_representation);
    return false;
  }

#endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

#ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
  eProsima_user_DllExport inline bool construct_sample(
      void* memory) const override {
    static_cast<void>(memory);
    return false;
  }

#endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

  MD5 m_md5;
  unsigned char* m_keyBuffer;
};

}  // namespace msg

}  // namespace booster_interface

#endif  // _FAST_DDS_GENERATED_BOOSTER_INTERFACE_MSG_ROBOTDDSBATTERYSTATUS_H_

#!/bin/bash
# This script builds the code from the command line using xcodebuild.
# It is executed by the script 'deploy'. It filters out a lot of the
# output of xcodebuild to make it more readable.

cd "$(dirname "$(which "$0")")"

if [ "$(uname -m)" != arm64 ]; then
  GENERATE_OPTION=
fi

./generate $GENERATE_OPTION >/dev/null

if [ "$1" == "SimRobot" ]; then
  COMMAND="-scheme"
  ARG="$1 - $2"
else
  COMMAND="-target $1 -configuration"
  ARG="$2"
fi

( xcodebuild -jobs `sysctl -n hw.ncpu` -parallelizeTargets $COMMAND "$ARG" \
  | grep --line-buffered "^[^ -]" \
  | grep --line-buffered -v \
    -e "Build settings from command line:" \
    -e "User defaults from command line:" \
    -e "^Build Preparation" \
    -e "^Build task concurrency" \
    -e "^=== BUILD TARGET" \
    -e "^Check dependencies" \
    -e "^Write auxiliary files" \
    -e "write-file" \
    -e "PhaseScriptExecution" \
    -e "^/bin/mkdir" \
    -e "^chmod" \
    -e "^Create product structure" \
    -e "^Signing Identity" \
    -e "^CodeSign" \
    -e "^.*/strip -S" \
    -e "^Touch" \
    -e "^RegisterWithLaunchServices" \
    -e "^note: " \
    -e "^ProcessProductPackaging" \
    -e "^RegisterExecutionPolicyException" \
    -e "^Command line invocation:" \
    -e "^ComputeTargetDependencyGraph" \
    -e "^GatherProvisioningInputs" \
    -e "^CreateBuildDescription" \
    -e "^Build description" \
    -e "^SchemeAction" \
    -e "^ExecuteExternalTool" \
    -e "^Run pre-actions" \
    -e "^}$" \
  | sed -l \
    -e "s%^CompileC [^ ]* \(.*/\)*\([^ ]*\).*%Compiling \2 ...%" \
    -e "s%^Ld \(.*/\)*\([^ ]*\).*%Linking \2 ...%" \
    -e "s%^ProcessPCH.*/\([^ ]*\).*%Precompiling \1 ...%" \
    -e "s%^Libtool.*/\([^ ]*\).*%Creating \1 ...%" \
    -e "s%^RuleScriptExecution.*/\([^ ]*\).*%Running script for \1 ...%" \
    -e "s%^ProcessInfoPlistFile.*/\([^ ]*\)%Processing \1 ...%" \
    -e "s%^CpResource.*/\([^ ]*\)%Copying \1 ...%" \
    -e "s%^PBXCp.*/\([^ ]*\)%Copying \1 ...%"
  test ${PIPESTATUS[0]} -eq 0
) 2> >( grep "BUILD FAILED" >&2 )
